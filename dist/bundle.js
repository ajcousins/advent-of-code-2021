/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/day16/input.txt":
/*!*****************************!*\
  !*** ./src/day16/input.txt ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("220D69802BE00A0803711E1441B1006E39C318A12730C200DCE66D2CCE360FA0055652CD32966E3004677EDF600B0803B1361741510076254138D8A00E4FFF3E3393ABE4FC7AC10410010799D2A4430003764DBE281802F3102CA00D4840198430EE0E00021D04E3F41F84AE0154DFDE65A17CCBFAFA14ADA56854FE5E3FD5BCC53B0D2598027A00848C63F2B918C7E513DEC3290051B3867E009CCC5FE46BD520007FE5E8AD344B37583D0803E40085475887144C01A8C10FE2B9803B0720D45A3004652FD8FA05F80122CAF91E5F50E66BEF8AB000BB0F4802039C20917B920B9221200ABF0017B9C92CCDC76BD3A8C4012CCB13CB22CDB243E9C3D2002067440400D9BE62DAC4D2DC0249BF76B6F72BE459B279F759AE7BE42E0058801CC059B08018A0070012CEC045BA01006C03A8000D46C02FA000A8EA007200800E00618018E00410034220061801D36BF178C01796FC52B4017100763547E86000084C7E8910AC0027E9B029FE2F4952F96D81B34C8400C24AA8CDAF4F1E98027C00FACDE3BA86982570D13AA640195CD67B046F004662711E989C468C01F1007A10C4C8320008742287117C401A8C715A3FC2C8EB3777540048272DFE7DE1C0149AC8BC9E79D63200B674013978E8BE5E3A2E9AA3CCDD538C01193CFAB0A146006AA00087C3E88B130401D8E304A239802F39FAC922C0169EA3248DF2D600247C89BCDFE9CA7FFD8BB49686236C9FF9795D80C0139BEC4D6C017978CF78C5EB981FCE7D4D801FA9FB63B14789534584010B5802F3467346D2C1D1E080355B00424FC99290C7E5D729586504803A2D005E677F868C271AA479CEEB131592EE5450043A932697E6A92C6E164991EFC4268F25A294600B5002A3393B31CC834B972804D2F3A4FD72B928E59219C9C771EC3DC89D1802135C9806802729694A6E723FD6134C0129A019E600");

/***/ }),

/***/ "./src/lib/hexToBin.ts":
/*!*****************************!*\
  !*** ./src/lib/hexToBin.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hexToBin": () => (/* binding */ hexToBin)
/* harmony export */ });
var hexToBin = {
    "0": "0000",
    "1": "0001",
    "2": "0010",
    "3": "0011",
    "4": "0100",
    "5": "0101",
    "6": "0110",
    "7": "0111",
    "8": "1000",
    "9": "1001",
    "A": "1010",
    "B": "1011",
    "C": "1100",
    "D": "1101",
    "E": "1110",
    "F": "1111",
};



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*************************!*\
  !*** ./src/day16/02.ts ***!
  \*************************/
__webpack_require__.r(__webpack_exports__);
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var hexToBin = (__webpack_require__(/*! ../lib/hexToBin */ "./src/lib/hexToBin.ts").hexToBin);
var text = __webpack_require__(/*! ./input.txt */ "./src/day16/input.txt");
var charArr = text.default.split("");
var binInput = charArr.map(function (char) { return hexToBin[char]; }).join("");
function parseBin(bin) {
    if (bin.length < 11)
        return null;
    var input = __spreadArray([], bin.split(""), true);
    var version = parseInt(input.slice(0, 3).join(""), 2);
    var typeID = parseInt(input.slice(3, 6).join(""), 2);
    input.splice(0, 6);
    // Literal value
    if (typeID === 4) {
        var bitArr = [];
        while (true) {
            bitArr.push(input.slice(1, 5).join(""));
            if (input[0] === "0") {
                input.splice(0, 5);
                return { version: version, typeID: typeID, binLength: (bitArr.length * 5) + 6, payload: parseInt(bitArr.join(""), 2) };
            }
            input.splice(0, 5);
        }
    }
    // Operator packet
    else {
        var lengthTypeID = input.shift();
        var packetArr = [];
        var binLength = void 0;
        if (lengthTypeID === "0") {
            var subPackBinLength = parseInt(input.splice(0, 15).join(""), 2);
            while (subPackBinLength > 0) {
                var result = parseBin(input.slice(0, subPackBinLength).join(""));
                packetArr.push(result);
                subPackBinLength -= result.binLength;
                input.splice(0, result.binLength);
            }
            binLength = packetArr.reduce(function (a, b) { return a + b.binLength; }, 0) + 22;
        }
        else {
            var numberOfSubPackets = parseInt(input.splice(0, 11).join(""), 2);
            while (numberOfSubPackets > 0) {
                var result = parseBin(input.join(""));
                input.splice(0, result.binLength);
                packetArr.push(result);
                numberOfSubPackets--;
            }
            binLength = packetArr.reduce(function (a, b) { return a + b.binLength; }, 0) + 18;
        }
        return { version: version, typeID: typeID, children: packetArr, binLength: binLength, payload: evalChildren(packetArr, typeID) };
    }
}
function evalChildren(arr, typeID) {
    switch (typeID) {
        case 0:
            return arr.reduce(function (p, c) { return p + c.payload; }, 0);
        case 1:
            return arr.reduce(function (p, c) { return p * c.payload; }, 1);
        case 2:
            return arr.reduce(function (p, c) { return Math.min(p, c.payload); }, Infinity);
        case 3:
            return arr.reduce(function (p, c) { return Math.max(p, c.payload); }, 0);
        case 5:
            return arr[0].payload > arr[1].payload ? 1 : 0;
        case 6:
            return arr[0].payload < arr[1].payload ? 1 : 0;
        case 7:
            return arr[0].payload === arr[1].payload ? 1 : 0;
        default:
            return null;
    }
}
parseBin(binInput);
console.log("output:", parseBin(binInput));


})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,